user jeremy users;

events {}

http {
	server {
		listen 80;
		server_name ~^(?<domain>.+)$;

		proxy_read_timeout 120;
		location /battle {
			proxy_pass http://127.0.0.1:8001/jsracer/;
		}
		location /nowjs {
			proxy_pass http://127.0.0.1:8001/nowjs/;

                        # This is a hack to make absolute urls work in spite of the
                        # reverse http proxying that nginx does.
                        sub_filter_types text/javascript;
                        sub_filter '"//127.0.0.1:8001"' '"//$domain"';
                        sub_filter_once on;
		}
		location /socket.io {
			proxy_pass http://127.0.0.1:8001/socket.io/;
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection "upgrade";
		}

                location /gatekeeper {
			# Rewrite all http requests to /gatekeeper to https.
                	rewrite ^ https://$domain$request_uri? permanent;
                }

		location /tornadotracker {
			autoindex on;    
			alias /home/jeremy/Dropbox/Public/TornadoTracker/;
		}

		location / {
			proxy_pass http://127.0.0.1:8080/;
		}

		# This blocks people killing the server from the
                # outside. Even though the tnoodle server checks the source ip,
                # since we're proxying everything through nginx, the source ip
                # is localhost.
		location /kill {
			return 404;
		}
	}

        server {
		listen 443;
		server_name ~^(?<domain>.+)$;

                ssl on;
                ssl_certificate server.crt;
                ssl_certificate_key server.key;

		location /gatekeeper {
			proxy_pass https://127.0.0.1:8042/;

                        # This is a hack to make absolute urls work in spite of the
                        # reverse http proxying that nginx does.
                        sub_filter_types text/xml;
                        sub_filter 'https://127.0.0.1:8042' 'https://$domain/gatekeeper';
                        sub_filter_once off;
		}
	}

}
