user REPLACE_WITH_USER users;
pid logs/nginx.pid;

events {}

http {
    include /etc/nginx/mime.types;

    server_names_hash_bucket_size 64;
    error_log /dev/null; #<<<logs/error.log debug;
    access_log /dev/null; #<<<logs/access.log;

    satisfy any;
    allow 192.168.1.0/24;
    allow 127.0.0.0/24;
    deny all;
    auth_basic "...";
    auth_basic_user_file htpasswd;

    # *** Copied from http://www.meteorpedia.com/read/nginx
    # we're in the http context here
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }
    proxy_set_header X-Real-IP $remote_addr;  # http://wiki.nginx.org/HttpProxyModule
    proxy_set_header Host $host;  # pass the host header - http://wiki.nginx.org/HttpProxyModule#proxy_pass
    proxy_http_version 1.1;  # recommended with keepalive connections - http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version
    # WebSocket proxying - from http://nginx.org/en/docs/http/websocket.html
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    # *** End copied from http://www.meteorpedia.com/read/nginx

    server {
        listen 80;

        location / {
            root webroot;
            index index.html;
        }
    }

    server {
        # jflei.com is hosted by github pages, and unfortunately, we can't
        # point 2 different domains at a github page.
        # As suggested on
        # https://help.github.com/articles/setting-up-a-custom-domain-with-pages,
        # I've found a "a service that can redirect the other domains
        # to your Pages domain."
        listen 80;
        server_name tnoodle.tk;
        rewrite ^ http://www.jflei.com$request_uri? permanent;
    }

    server {
        listen 80;
        server_name torrents.*;

        location / {
            proxy_pass http://127.0.0.1:9091;
        }
    }

    server {
        listen 80;
        server_name sync.*;

        location / {
            proxy_pass http://127.0.0.1:8888;
        }
    }

    server {
        listen 80;
        server_name media.*;

        location / {
            root /home/media;
            index index.html;
            autoindex on;
        }
    }

    server {
        listen 80;
        server_name kodi.*;

        location / {
            proxy_pass http://127.0.0.1:8080;
        }
    }

    server {
        listen 80;
        server_name staging.live.*;
        satisfy any;
        allow all;
        auth_basic off;

        location / {
            proxy_pass http://127.0.0.1:3010;
        }
    }

    server {
        listen 80;
        server_name live.*;
        satisfy any;
        allow all;
        auth_basic off;

        location / {
            proxy_pass http://127.0.0.1:3020;
        }
    }

    server {
        listen 80;
        server_name race.*;
        satisfy any;
        allow all;
        auth_basic off;

        location / {
            proxy_pass http://127.0.0.1:8001;
        }
    }

    # TODO - need to generate certificates. Maybe should start using Let's Encrypt?
    # server {
    #     listen 443;
    #
    #     ssl on;
    #     ssl_certificate server.crt;
    #     ssl_certificate_key server.key;
    #
    #     deny all;
    #     auth_basic "...";
    #     auth_basic_user_file htpasswd;
    #
    #     location / {
    #         proxy_pass http://127.0.0.1:8042;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }
}
